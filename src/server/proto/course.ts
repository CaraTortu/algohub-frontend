// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v3.19.1
// source: course.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "";

/** Types */
export interface Course {
  id: string;
  name: string;
  description: string;
  chapters: Course_Chapter[];
}

export interface Course_Chapter {
  id: string;
  name: string;
  order: number;
  sections: Course_Chapter_Section[];
}

export interface Course_Chapter_Section {
  id: string;
  name: string;
  order: number;
  title: string;
  content: string;
}

/** GetCourses */
export interface GetCoursesResponse {
  courses: GetCoursesResponse_Course[];
}

export interface GetCoursesResponse_Course {
  id: string;
  name: string;
  description: string;
}

/** GetCourse */
export interface GetCourseRequest {
  id: string;
}

export interface GetCourseResponse {
  success: boolean;
  reason?: string | undefined;
  course?: Course | undefined;
}

function createBaseCourse(): Course {
  return { id: "", name: "", description: "", chapters: [] };
}

export const Course: MessageFns<Course> = {
  encode(message: Course, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.chapters) {
      Course_Chapter.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Course {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chapters.push(Course_Chapter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Course {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      chapters: globalThis.Array.isArray(object?.chapters)
        ? object.chapters.map((e: any) => Course_Chapter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Course): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.chapters?.length) {
      obj.chapters = message.chapters.map((e) => Course_Chapter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Course>, I>>(base?: I): Course {
    return Course.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Course>, I>>(object: I): Course {
    const message = createBaseCourse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.chapters = object.chapters?.map((e) => Course_Chapter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCourse_Chapter(): Course_Chapter {
  return { id: "", name: "", order: 0, sections: [] };
}

export const Course_Chapter: MessageFns<Course_Chapter> = {
  encode(message: Course_Chapter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.order !== 0) {
      writer.uint32(24).int32(message.order);
    }
    for (const v of message.sections) {
      Course_Chapter_Section.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Course_Chapter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourse_Chapter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sections.push(Course_Chapter_Section.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Course_Chapter {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      sections: globalThis.Array.isArray(object?.sections)
        ? object.sections.map((e: any) => Course_Chapter_Section.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Course_Chapter): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.sections?.length) {
      obj.sections = message.sections.map((e) => Course_Chapter_Section.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Course_Chapter>, I>>(base?: I): Course_Chapter {
    return Course_Chapter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Course_Chapter>, I>>(object: I): Course_Chapter {
    const message = createBaseCourse_Chapter();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.order = object.order ?? 0;
    message.sections = object.sections?.map((e) => Course_Chapter_Section.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCourse_Chapter_Section(): Course_Chapter_Section {
  return { id: "", name: "", order: 0, title: "", content: "" };
}

export const Course_Chapter_Section: MessageFns<Course_Chapter_Section> = {
  encode(message: Course_Chapter_Section, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.order !== 0) {
      writer.uint32(24).int32(message.order);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(42).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Course_Chapter_Section {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourse_Chapter_Section();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Course_Chapter_Section {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: Course_Chapter_Section): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Course_Chapter_Section>, I>>(base?: I): Course_Chapter_Section {
    return Course_Chapter_Section.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Course_Chapter_Section>, I>>(object: I): Course_Chapter_Section {
    const message = createBaseCourse_Chapter_Section();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.order = object.order ?? 0;
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseGetCoursesResponse(): GetCoursesResponse {
  return { courses: [] };
}

export const GetCoursesResponse: MessageFns<GetCoursesResponse> = {
  encode(message: GetCoursesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.courses) {
      GetCoursesResponse_Course.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCoursesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCoursesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.courses.push(GetCoursesResponse_Course.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCoursesResponse {
    return {
      courses: globalThis.Array.isArray(object?.courses)
        ? object.courses.map((e: any) => GetCoursesResponse_Course.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCoursesResponse): unknown {
    const obj: any = {};
    if (message.courses?.length) {
      obj.courses = message.courses.map((e) => GetCoursesResponse_Course.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCoursesResponse>, I>>(base?: I): GetCoursesResponse {
    return GetCoursesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCoursesResponse>, I>>(object: I): GetCoursesResponse {
    const message = createBaseGetCoursesResponse();
    message.courses = object.courses?.map((e) => GetCoursesResponse_Course.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetCoursesResponse_Course(): GetCoursesResponse_Course {
  return { id: "", name: "", description: "" };
}

export const GetCoursesResponse_Course: MessageFns<GetCoursesResponse_Course> = {
  encode(message: GetCoursesResponse_Course, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCoursesResponse_Course {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCoursesResponse_Course();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCoursesResponse_Course {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: GetCoursesResponse_Course): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCoursesResponse_Course>, I>>(base?: I): GetCoursesResponse_Course {
    return GetCoursesResponse_Course.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCoursesResponse_Course>, I>>(object: I): GetCoursesResponse_Course {
    const message = createBaseGetCoursesResponse_Course();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseGetCourseRequest(): GetCourseRequest {
  return { id: "" };
}

export const GetCourseRequest: MessageFns<GetCourseRequest> = {
  encode(message: GetCourseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetCourseRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseRequest>, I>>(base?: I): GetCourseRequest {
    return GetCourseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseRequest>, I>>(object: I): GetCourseRequest {
    const message = createBaseGetCourseRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetCourseResponse(): GetCourseResponse {
  return { success: false, reason: undefined, course: undefined };
}

export const GetCourseResponse: MessageFns<GetCourseResponse> = {
  encode(message: GetCourseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.reason !== undefined) {
      writer.uint32(18).string(message.reason);
    }
    if (message.course !== undefined) {
      Course.encode(message.course, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCourseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCourseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.course = Course.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCourseResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : undefined,
      course: isSet(object.course) ? Course.fromJSON(object.course) : undefined,
    };
  },

  toJSON(message: GetCourseResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.reason !== undefined) {
      obj.reason = message.reason;
    }
    if (message.course !== undefined) {
      obj.course = Course.toJSON(message.course);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCourseResponse>, I>>(base?: I): GetCourseResponse {
    return GetCourseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCourseResponse>, I>>(object: I): GetCourseResponse {
    const message = createBaseGetCourseResponse();
    message.success = object.success ?? false;
    message.reason = object.reason ?? undefined;
    message.course = (object.course !== undefined && object.course !== null)
      ? Course.fromPartial(object.course)
      : undefined;
    return message;
  },
};

export type CourseServiceService = typeof CourseServiceService;
export const CourseServiceService = {
  getCourses: {
    path: "/CourseService/GetCourses",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: GetCoursesResponse) => Buffer.from(GetCoursesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCoursesResponse.decode(value),
  },
  getCourse: {
    path: "/CourseService/GetCourse",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCourseRequest) => Buffer.from(GetCourseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetCourseRequest.decode(value),
    responseSerialize: (value: GetCourseResponse) => Buffer.from(GetCourseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCourseResponse.decode(value),
  },
} as const;

export interface CourseServiceServer extends UntypedServiceImplementation {
  getCourses: handleUnaryCall<Empty, GetCoursesResponse>;
  getCourse: handleUnaryCall<GetCourseRequest, GetCourseResponse>;
}

export interface CourseServiceClient extends Client {
  getCourses(
    request: Empty,
    callback: (error: ServiceError | null, response: GetCoursesResponse) => void,
  ): ClientUnaryCall;
  getCourses(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCoursesResponse) => void,
  ): ClientUnaryCall;
  getCourses(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCoursesResponse) => void,
  ): ClientUnaryCall;
  getCourse(
    request: GetCourseRequest,
    callback: (error: ServiceError | null, response: GetCourseResponse) => void,
  ): ClientUnaryCall;
  getCourse(
    request: GetCourseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCourseResponse) => void,
  ): ClientUnaryCall;
  getCourse(
    request: GetCourseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCourseResponse) => void,
  ): ClientUnaryCall;
}

export const CourseServiceClient = makeGenericClientConstructor(CourseServiceService, "CourseService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CourseServiceClient;
  service: typeof CourseServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
